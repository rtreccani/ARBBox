/*
   This file was generated automatically by Alchitry Labs version 1.2.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module DDR3Interface(     
	input 			 clk100,
	input 			 sys_rst, 
	output 			 ui_clk,
	//ddr3 interface
    inout   [15:0]   ddr3_dq,
    inout   [1:0]    ddr3_dqs_n,
    inout   [1:0]    ddr3_dqs_p,
    output  [13:0]   ddr3_addr,
    output  [2:0]    ddr3_ba,
    output           ddr3_ras_n,
    output           ddr3_cas_n,
    output           ddr3_we_n,
    output           ddr3_reset_n,
    output           ddr3_ck_p,
    output           ddr3_ck_n,
    output           ddr3_cke,
    output           ddr3_cs_n,
    output  [1:0]    ddr3_dm,
    output           ddr3_odt,
    
    //user interface
	input [27:0] UI_wr_addr,
    input [7:0] UI_wr_data,
    input UI_wr_valid,
    output reg UI_wr_ready,
    input [27:0] UI_rd_addr,
    input UI_rd_cmd_valid,
    output reg UI_rd_ready,
    output reg [7:0] UI_rd_data,
    output reg UI_rd_data_valid,
    input UI_flush,
    output reg UI_flush_ready
);

//so called Native bus (LRU <=> MIG_Wrapper)
wire    [176:0] native_mem_in;
wire     [130:0] native_mem_out;



lru_cache_2 cache (
	//clocks and resets
    .clk(M_mig_ui_clk),
    .rst(rst),
    
    //UI bus
    .wr_addr(UI_wr_addr),
    .wr_data(UI_wr_data),
    .wr_valid(UI_wr_valid),
    .rd_addr(UI_rd_addr),
    .rd_cmd_valid(UI_rd_cmd_valid),
    .flush(UI_flush),
    .wr_ready(UI_wr_ready),
    .rd_ready(UI_rd_ready),
    .rd_data(UI_rd_data),
    .rd_data_valid(UI_rd_data_valid),
    .flush_ready(UI_flush_ready),
    //native
    .mem_out(native_mem_out),
    .mem_in(native_mem_in)
);
  

reg rst;

//wires for the clk_wiz object
wire M_clk_wiz_clk_out1;
wire M_clk_wiz_clk_out2;
wire M_clk_wiz_clk_out3;
reg M_clk_wiz_reset;
reg M_clk_wiz_clk_in1;

//connections to the clock wiz and it's instantiation
clk_wiz_0 clk_wiz (
.reset(sys_rst),
.clk_in1(clk100),
.clk_out1(M_clk_wiz_clk_out1),
.clk_out2(M_clk_wiz_clk_out2),
.clk_out3(M_clk_wiz_clk_out3),
.locked(M_clk_wiz_locked)
);


wire    [13:0]  M_mig_ddr3_addr;
wire    [2:0]   M_mig_ddr3_ba;
wire            M_mig_ddr3_ras_n;
wire            M_mig_ddr3_cas_n;
wire            M_mig_ddr3_we_n;
wire            M_mig_ddr3_reset_n;
wire            M_mig_ddr3_ck_p;
wire            M_mig_ddr3_ck_n;
wire            M_mig_ddr3_cke;
wire            M_mig_ddr3_cs_n;
wire    [1:0]   M_mig_ddr3_dm;
wire            M_mig_ddr3_odt;
wire    [130:0] M_mig_mem_out;
wire            M_mig_ui_clk;
wire            M_mig_sync_rst;
reg             M_mig_sys_clk;
reg             M_mig_clk_ref;
reg     [176:0] M_mig_mem_in;
reg             M_mig_sys_rst;

mig_wrapper_1 mig (
	//ddr3 bus connectes
    .ddr3_dq(ddr3_dq),
    .ddr3_dqs_n(ddr3_dqs_n),
    .ddr3_dqs_p(ddr3_dqs_p),
    .ddr3_addr(ddr3_addr),
    .ddr3_ba(ddr3_ba),
    .ddr3_ras_n(ddr3_ras_n),
    .ddr3_cas_n(ddr3_cas_n),
    .ddr3_we_n(ddr3_we_n),
    .ddr3_reset_n(ddr3_reset_n),
    .ddr3_ck_p(ddr3_ck_p),
    .ddr3_ck_n(ddr3_ck_n),
    .ddr3_cke(ddr3_cke),
    .ddr3_cs_n(ddr3_cs_n),
    .ddr3_dm(ddr3_dm),
    .ddr3_odt(ddr3_odt),
    //native and clocks
    .mem_in(native_mem_in),
    .sys_rst(M_mig_sys_rst),
    .sys_clk(M_mig_sys_clk),
    .clk_ref(M_mig_clk_ref),
    .mem_out(native_mem_out),
    .ui_clk(M_mig_ui_clk),
    .sync_rst(M_mig_sync_rst)
);

endmodule
